# coding: utf-8

"""
    rds_mssql

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeDBInstanceDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_info': 'BasicInfoForDescribeDBInstanceDetailOutput',
        'charge_detail': 'ChargeDetailForDescribeDBInstanceDetailOutput',
        'connection_info': 'list[ConnectionInfoForDescribeDBInstanceDetailOutput]',
        'node_detail_info': 'list[NodeDetailInfoForDescribeDBInstanceDetailOutput]'
    }

    attribute_map = {
        'basic_info': 'BasicInfo',
        'charge_detail': 'ChargeDetail',
        'connection_info': 'ConnectionInfo',
        'node_detail_info': 'NodeDetailInfo'
    }

    def __init__(self, basic_info=None, charge_detail=None, connection_info=None, node_detail_info=None, _configuration=None):  # noqa: E501
        """DescribeDBInstanceDetailResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._basic_info = None
        self._charge_detail = None
        self._connection_info = None
        self._node_detail_info = None
        self.discriminator = None

        if basic_info is not None:
            self.basic_info = basic_info
        if charge_detail is not None:
            self.charge_detail = charge_detail
        if connection_info is not None:
            self.connection_info = connection_info
        if node_detail_info is not None:
            self.node_detail_info = node_detail_info

    @property
    def basic_info(self):
        """Gets the basic_info of this DescribeDBInstanceDetailResponse.  # noqa: E501


        :return: The basic_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :rtype: BasicInfoForDescribeDBInstanceDetailOutput
        """
        return self._basic_info

    @basic_info.setter
    def basic_info(self, basic_info):
        """Sets the basic_info of this DescribeDBInstanceDetailResponse.


        :param basic_info: The basic_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :type: BasicInfoForDescribeDBInstanceDetailOutput
        """

        self._basic_info = basic_info

    @property
    def charge_detail(self):
        """Gets the charge_detail of this DescribeDBInstanceDetailResponse.  # noqa: E501


        :return: The charge_detail of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :rtype: ChargeDetailForDescribeDBInstanceDetailOutput
        """
        return self._charge_detail

    @charge_detail.setter
    def charge_detail(self, charge_detail):
        """Sets the charge_detail of this DescribeDBInstanceDetailResponse.


        :param charge_detail: The charge_detail of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :type: ChargeDetailForDescribeDBInstanceDetailOutput
        """

        self._charge_detail = charge_detail

    @property
    def connection_info(self):
        """Gets the connection_info of this DescribeDBInstanceDetailResponse.  # noqa: E501


        :return: The connection_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :rtype: list[ConnectionInfoForDescribeDBInstanceDetailOutput]
        """
        return self._connection_info

    @connection_info.setter
    def connection_info(self, connection_info):
        """Sets the connection_info of this DescribeDBInstanceDetailResponse.


        :param connection_info: The connection_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :type: list[ConnectionInfoForDescribeDBInstanceDetailOutput]
        """

        self._connection_info = connection_info

    @property
    def node_detail_info(self):
        """Gets the node_detail_info of this DescribeDBInstanceDetailResponse.  # noqa: E501


        :return: The node_detail_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :rtype: list[NodeDetailInfoForDescribeDBInstanceDetailOutput]
        """
        return self._node_detail_info

    @node_detail_info.setter
    def node_detail_info(self, node_detail_info):
        """Sets the node_detail_info of this DescribeDBInstanceDetailResponse.


        :param node_detail_info: The node_detail_info of this DescribeDBInstanceDetailResponse.  # noqa: E501
        :type: list[NodeDetailInfoForDescribeDBInstanceDetailOutput]
        """

        self._node_detail_info = node_detail_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeDBInstanceDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeDBInstanceDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeDBInstanceDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
