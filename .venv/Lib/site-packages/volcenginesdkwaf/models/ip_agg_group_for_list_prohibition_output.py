# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class IpAggGroupForListProhibitionOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drop_count': 'int',
        'ip': 'str',
        'reason': 'ReasonForListProhibitionOutput',
        'rule_name': 'str',
        'rule_tag': 'str',
        'status': 'int',
        'update_time': 'str'
    }

    attribute_map = {
        'drop_count': 'DropCount',
        'ip': 'Ip',
        'reason': 'Reason',
        'rule_name': 'RuleName',
        'rule_tag': 'RuleTag',
        'status': 'Status',
        'update_time': 'UpdateTime'
    }

    def __init__(self, drop_count=None, ip=None, reason=None, rule_name=None, rule_tag=None, status=None, update_time=None, _configuration=None):  # noqa: E501
        """IpAggGroupForListProhibitionOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._drop_count = None
        self._ip = None
        self._reason = None
        self._rule_name = None
        self._rule_tag = None
        self._status = None
        self._update_time = None
        self.discriminator = None

        if drop_count is not None:
            self.drop_count = drop_count
        if ip is not None:
            self.ip = ip
        if reason is not None:
            self.reason = reason
        if rule_name is not None:
            self.rule_name = rule_name
        if rule_tag is not None:
            self.rule_tag = rule_tag
        if status is not None:
            self.status = status
        if update_time is not None:
            self.update_time = update_time

    @property
    def drop_count(self):
        """Gets the drop_count of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The drop_count of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: int
        """
        return self._drop_count

    @drop_count.setter
    def drop_count(self, drop_count):
        """Sets the drop_count of this IpAggGroupForListProhibitionOutput.


        :param drop_count: The drop_count of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: int
        """

        self._drop_count = drop_count

    @property
    def ip(self):
        """Gets the ip of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The ip of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IpAggGroupForListProhibitionOutput.


        :param ip: The ip of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def reason(self):
        """Gets the reason of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The reason of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: ReasonForListProhibitionOutput
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IpAggGroupForListProhibitionOutput.


        :param reason: The reason of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: ReasonForListProhibitionOutput
        """

        self._reason = reason

    @property
    def rule_name(self):
        """Gets the rule_name of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The rule_name of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this IpAggGroupForListProhibitionOutput.


        :param rule_name: The rule_name of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    @property
    def rule_tag(self):
        """Gets the rule_tag of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The rule_tag of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: str
        """
        return self._rule_tag

    @rule_tag.setter
    def rule_tag(self, rule_tag):
        """Sets the rule_tag of this IpAggGroupForListProhibitionOutput.


        :param rule_tag: The rule_tag of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: str
        """

        self._rule_tag = rule_tag

    @property
    def status(self):
        """Gets the status of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The status of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IpAggGroupForListProhibitionOutput.


        :param status: The status of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this IpAggGroupForListProhibitionOutput.  # noqa: E501


        :return: The update_time of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this IpAggGroupForListProhibitionOutput.


        :param update_time: The update_time of this IpAggGroupForListProhibitionOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpAggGroupForListProhibitionOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpAggGroupForListProhibitionOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpAggGroupForListProhibitionOutput):
            return True

        return self.to_dict() != other.to_dict()
