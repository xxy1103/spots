# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class RuleSetInfoForGetVulnerabilityConfigOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_detection': 'CommonDetectionForGetVulnerabilityConfigOutput',
        'logical_vulnerability': 'LogicalVulnerabilityForGetVulnerabilityConfigOutput',
        'web_backdoor': 'WebBackdoorForGetVulnerabilityConfigOutput'
    }

    attribute_map = {
        'common_detection': 'CommonDetection',
        'logical_vulnerability': 'LogicalVulnerability',
        'web_backdoor': 'WebBackdoor'
    }

    def __init__(self, common_detection=None, logical_vulnerability=None, web_backdoor=None, _configuration=None):  # noqa: E501
        """RuleSetInfoForGetVulnerabilityConfigOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._common_detection = None
        self._logical_vulnerability = None
        self._web_backdoor = None
        self.discriminator = None

        if common_detection is not None:
            self.common_detection = common_detection
        if logical_vulnerability is not None:
            self.logical_vulnerability = logical_vulnerability
        if web_backdoor is not None:
            self.web_backdoor = web_backdoor

    @property
    def common_detection(self):
        """Gets the common_detection of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501


        :return: The common_detection of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :rtype: CommonDetectionForGetVulnerabilityConfigOutput
        """
        return self._common_detection

    @common_detection.setter
    def common_detection(self, common_detection):
        """Sets the common_detection of this RuleSetInfoForGetVulnerabilityConfigOutput.


        :param common_detection: The common_detection of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :type: CommonDetectionForGetVulnerabilityConfigOutput
        """

        self._common_detection = common_detection

    @property
    def logical_vulnerability(self):
        """Gets the logical_vulnerability of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501


        :return: The logical_vulnerability of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :rtype: LogicalVulnerabilityForGetVulnerabilityConfigOutput
        """
        return self._logical_vulnerability

    @logical_vulnerability.setter
    def logical_vulnerability(self, logical_vulnerability):
        """Sets the logical_vulnerability of this RuleSetInfoForGetVulnerabilityConfigOutput.


        :param logical_vulnerability: The logical_vulnerability of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :type: LogicalVulnerabilityForGetVulnerabilityConfigOutput
        """

        self._logical_vulnerability = logical_vulnerability

    @property
    def web_backdoor(self):
        """Gets the web_backdoor of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501


        :return: The web_backdoor of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :rtype: WebBackdoorForGetVulnerabilityConfigOutput
        """
        return self._web_backdoor

    @web_backdoor.setter
    def web_backdoor(self, web_backdoor):
        """Sets the web_backdoor of this RuleSetInfoForGetVulnerabilityConfigOutput.


        :param web_backdoor: The web_backdoor of this RuleSetInfoForGetVulnerabilityConfigOutput.  # noqa: E501
        :type: WebBackdoorForGetVulnerabilityConfigOutput
        """

        self._web_backdoor = web_backdoor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSetInfoForGetVulnerabilityConfigOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSetInfoForGetVulnerabilityConfigOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleSetInfoForGetVulnerabilityConfigOutput):
            return True

        return self.to_dict() != other.to_dict()
