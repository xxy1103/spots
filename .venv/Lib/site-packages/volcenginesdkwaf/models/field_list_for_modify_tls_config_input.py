# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class FieldListForModifyTLSConfigInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cookie': 'bool',
        'request_body': 'bool',
        'rule_description': 'bool',
        'rule_name': 'bool'
    }

    attribute_map = {
        'cookie': 'Cookie',
        'request_body': 'RequestBody',
        'rule_description': 'RuleDescription',
        'rule_name': 'RuleName'
    }

    def __init__(self, cookie=None, request_body=None, rule_description=None, rule_name=None, _configuration=None):  # noqa: E501
        """FieldListForModifyTLSConfigInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cookie = None
        self._request_body = None
        self._rule_description = None
        self._rule_name = None
        self.discriminator = None

        if cookie is not None:
            self.cookie = cookie
        if request_body is not None:
            self.request_body = request_body
        if rule_description is not None:
            self.rule_description = rule_description
        if rule_name is not None:
            self.rule_name = rule_name

    @property
    def cookie(self):
        """Gets the cookie of this FieldListForModifyTLSConfigInput.  # noqa: E501


        :return: The cookie of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this FieldListForModifyTLSConfigInput.


        :param cookie: The cookie of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :type: bool
        """

        self._cookie = cookie

    @property
    def request_body(self):
        """Gets the request_body of this FieldListForModifyTLSConfigInput.  # noqa: E501


        :return: The request_body of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this FieldListForModifyTLSConfigInput.


        :param request_body: The request_body of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :type: bool
        """

        self._request_body = request_body

    @property
    def rule_description(self):
        """Gets the rule_description of this FieldListForModifyTLSConfigInput.  # noqa: E501


        :return: The rule_description of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._rule_description

    @rule_description.setter
    def rule_description(self, rule_description):
        """Sets the rule_description of this FieldListForModifyTLSConfigInput.


        :param rule_description: The rule_description of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :type: bool
        """

        self._rule_description = rule_description

    @property
    def rule_name(self):
        """Gets the rule_name of this FieldListForModifyTLSConfigInput.  # noqa: E501


        :return: The rule_name of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :rtype: bool
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this FieldListForModifyTLSConfigInput.


        :param rule_name: The rule_name of this FieldListForModifyTLSConfigInput.  # noqa: E501
        :type: bool
        """

        self._rule_name = rule_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldListForModifyTLSConfigInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldListForModifyTLSConfigInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldListForModifyTLSConfigInput):
            return True

        return self.to_dict() != other.to_dict()
