# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class QueryAttackSecurityEventRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_host': 'bool',
        'all_host_details': 'list[str]',
        'end_time': 'int',
        'event_type': 'str',
        'filter_all': 'bool',
        'host': 'str',
        'ip': 'str',
        'page': 'int',
        'page_size': 'int',
        'path': 'str',
        'project_name': 'str',
        'security_level': 'str',
        'sort_flag': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'all_host': 'AllHost',
        'all_host_details': 'AllHostDetails',
        'end_time': 'EndTime',
        'event_type': 'EventType',
        'filter_all': 'FilterAll',
        'host': 'Host',
        'ip': 'Ip',
        'page': 'Page',
        'page_size': 'PageSize',
        'path': 'Path',
        'project_name': 'ProjectName',
        'security_level': 'SecurityLevel',
        'sort_flag': 'SortFlag',
        'start_time': 'StartTime'
    }

    def __init__(self, all_host=None, all_host_details=None, end_time=None, event_type=None, filter_all=None, host=None, ip=None, page=None, page_size=None, path=None, project_name=None, security_level=None, sort_flag=None, start_time=None, _configuration=None):  # noqa: E501
        """QueryAttackSecurityEventRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._all_host = None
        self._all_host_details = None
        self._end_time = None
        self._event_type = None
        self._filter_all = None
        self._host = None
        self._ip = None
        self._page = None
        self._page_size = None
        self._path = None
        self._project_name = None
        self._security_level = None
        self._sort_flag = None
        self._start_time = None
        self.discriminator = None

        if all_host is not None:
            self.all_host = all_host
        if all_host_details is not None:
            self.all_host_details = all_host_details
        self.end_time = end_time
        if event_type is not None:
            self.event_type = event_type
        if filter_all is not None:
            self.filter_all = filter_all
        if host is not None:
            self.host = host
        if ip is not None:
            self.ip = ip
        self.page = page
        self.page_size = page_size
        if path is not None:
            self.path = path
        if project_name is not None:
            self.project_name = project_name
        if security_level is not None:
            self.security_level = security_level
        if sort_flag is not None:
            self.sort_flag = sort_flag
        self.start_time = start_time

    @property
    def all_host(self):
        """Gets the all_host of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The all_host of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._all_host

    @all_host.setter
    def all_host(self, all_host):
        """Sets the all_host of this QueryAttackSecurityEventRequest.


        :param all_host: The all_host of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: bool
        """

        self._all_host = all_host

    @property
    def all_host_details(self):
        """Gets the all_host_details of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The all_host_details of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._all_host_details

    @all_host_details.setter
    def all_host_details(self, all_host_details):
        """Sets the all_host_details of this QueryAttackSecurityEventRequest.


        :param all_host_details: The all_host_details of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: list[str]
        """

        self._all_host_details = all_host_details

    @property
    def end_time(self):
        """Gets the end_time of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The end_time of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this QueryAttackSecurityEventRequest.


        :param end_time: The end_time of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def event_type(self):
        """Gets the event_type of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The event_type of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this QueryAttackSecurityEventRequest.


        :param event_type: The event_type of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def filter_all(self):
        """Gets the filter_all of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The filter_all of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._filter_all

    @filter_all.setter
    def filter_all(self, filter_all):
        """Sets the filter_all of this QueryAttackSecurityEventRequest.


        :param filter_all: The filter_all of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: bool
        """

        self._filter_all = filter_all

    @property
    def host(self):
        """Gets the host of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The host of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this QueryAttackSecurityEventRequest.


        :param host: The host of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def ip(self):
        """Gets the ip of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The ip of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this QueryAttackSecurityEventRequest.


        :param ip: The ip of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def page(self):
        """Gets the page of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The page of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this QueryAttackSecurityEventRequest.


        :param page: The page of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The page_size of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this QueryAttackSecurityEventRequest.


        :param page_size: The page_size of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def path(self):
        """Gets the path of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The path of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this QueryAttackSecurityEventRequest.


        :param path: The path of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def project_name(self):
        """Gets the project_name of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The project_name of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this QueryAttackSecurityEventRequest.


        :param project_name: The project_name of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def security_level(self):
        """Gets the security_level of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The security_level of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this QueryAttackSecurityEventRequest.


        :param security_level: The security_level of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._security_level = security_level

    @property
    def sort_flag(self):
        """Gets the sort_flag of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The sort_flag of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_flag

    @sort_flag.setter
    def sort_flag(self, sort_flag):
        """Sets the sort_flag of this QueryAttackSecurityEventRequest.


        :param sort_flag: The sort_flag of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: str
        """

        self._sort_flag = sort_flag

    @property
    def start_time(self):
        """Gets the start_time of this QueryAttackSecurityEventRequest.  # noqa: E501


        :return: The start_time of this QueryAttackSecurityEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this QueryAttackSecurityEventRequest.


        :param start_time: The start_time of this QueryAttackSecurityEventRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryAttackSecurityEventRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryAttackSecurityEventRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryAttackSecurityEventRequest):
            return True

        return self.to_dict() != other.to_dict()
