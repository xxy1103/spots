# coding: utf-8

"""
    waf

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForListTamperProofOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_ip': 'str',
        'content': 'str',
        'content_type': 'str',
        'description': 'str',
        'enable': 'int',
        'host': 'str',
        'id': 'int',
        'isolation_id': 'str',
        'md5': 'str',
        'name': 'str',
        'policy': 'int',
        'update_time': 'str',
        'url': 'str'
    }

    attribute_map = {
        'client_ip': 'ClientIp',
        'content': 'Content',
        'content_type': 'ContentType',
        'description': 'Description',
        'enable': 'Enable',
        'host': 'Host',
        'id': 'Id',
        'isolation_id': 'IsolationId',
        'md5': 'MD5',
        'name': 'Name',
        'policy': 'Policy',
        'update_time': 'UpdateTime',
        'url': 'Url'
    }

    def __init__(self, client_ip=None, content=None, content_type=None, description=None, enable=None, host=None, id=None, isolation_id=None, md5=None, name=None, policy=None, update_time=None, url=None, _configuration=None):  # noqa: E501
        """DataForListTamperProofOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_ip = None
        self._content = None
        self._content_type = None
        self._description = None
        self._enable = None
        self._host = None
        self._id = None
        self._isolation_id = None
        self._md5 = None
        self._name = None
        self._policy = None
        self._update_time = None
        self._url = None
        self.discriminator = None

        if client_ip is not None:
            self.client_ip = client_ip
        if content is not None:
            self.content = content
        if content_type is not None:
            self.content_type = content_type
        if description is not None:
            self.description = description
        if enable is not None:
            self.enable = enable
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if isolation_id is not None:
            self.isolation_id = isolation_id
        if md5 is not None:
            self.md5 = md5
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if update_time is not None:
            self.update_time = update_time
        if url is not None:
            self.url = url

    @property
    def client_ip(self):
        """Gets the client_ip of this DataForListTamperProofOutput.  # noqa: E501


        :return: The client_ip of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this DataForListTamperProofOutput.


        :param client_ip: The client_ip of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def content(self):
        """Gets the content of this DataForListTamperProofOutput.  # noqa: E501


        :return: The content of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DataForListTamperProofOutput.


        :param content: The content of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this DataForListTamperProofOutput.  # noqa: E501


        :return: The content_type of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DataForListTamperProofOutput.


        :param content_type: The content_type of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this DataForListTamperProofOutput.  # noqa: E501


        :return: The description of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataForListTamperProofOutput.


        :param description: The description of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable(self):
        """Gets the enable of this DataForListTamperProofOutput.  # noqa: E501


        :return: The enable of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: int
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DataForListTamperProofOutput.


        :param enable: The enable of this DataForListTamperProofOutput.  # noqa: E501
        :type: int
        """

        self._enable = enable

    @property
    def host(self):
        """Gets the host of this DataForListTamperProofOutput.  # noqa: E501


        :return: The host of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DataForListTamperProofOutput.


        :param host: The host of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this DataForListTamperProofOutput.  # noqa: E501


        :return: The id of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataForListTamperProofOutput.


        :param id: The id of this DataForListTamperProofOutput.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def isolation_id(self):
        """Gets the isolation_id of this DataForListTamperProofOutput.  # noqa: E501


        :return: The isolation_id of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._isolation_id

    @isolation_id.setter
    def isolation_id(self, isolation_id):
        """Sets the isolation_id of this DataForListTamperProofOutput.


        :param isolation_id: The isolation_id of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._isolation_id = isolation_id

    @property
    def md5(self):
        """Gets the md5 of this DataForListTamperProofOutput.  # noqa: E501


        :return: The md5 of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this DataForListTamperProofOutput.


        :param md5: The md5 of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    @property
    def name(self):
        """Gets the name of this DataForListTamperProofOutput.  # noqa: E501


        :return: The name of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataForListTamperProofOutput.


        :param name: The name of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this DataForListTamperProofOutput.  # noqa: E501


        :return: The policy of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: int
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this DataForListTamperProofOutput.


        :param policy: The policy of this DataForListTamperProofOutput.  # noqa: E501
        :type: int
        """

        self._policy = policy

    @property
    def update_time(self):
        """Gets the update_time of this DataForListTamperProofOutput.  # noqa: E501


        :return: The update_time of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DataForListTamperProofOutput.


        :param update_time: The update_time of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def url(self):
        """Gets the url of this DataForListTamperProofOutput.  # noqa: E501


        :return: The url of this DataForListTamperProofOutput.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataForListTamperProofOutput.


        :param url: The url of this DataForListTamperProofOutput.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForListTamperProofOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForListTamperProofOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForListTamperProofOutput):
            return True

        return self.to_dict() != other.to_dict()
