# coding: utf-8

"""
    kafka

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class AllowListForDescribeAllowListsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_list_desc': 'str',
        'allow_list_id': 'str',
        'allow_list_ip_num': 'int',
        'allow_list_name': 'str',
        'associated_instance_num': 'int'
    }

    attribute_map = {
        'allow_list_desc': 'AllowListDesc',
        'allow_list_id': 'AllowListId',
        'allow_list_ip_num': 'AllowListIpNum',
        'allow_list_name': 'AllowListName',
        'associated_instance_num': 'AssociatedInstanceNum'
    }

    def __init__(self, allow_list_desc=None, allow_list_id=None, allow_list_ip_num=None, allow_list_name=None, associated_instance_num=None, _configuration=None):  # noqa: E501
        """AllowListForDescribeAllowListsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_list_desc = None
        self._allow_list_id = None
        self._allow_list_ip_num = None
        self._allow_list_name = None
        self._associated_instance_num = None
        self.discriminator = None

        if allow_list_desc is not None:
            self.allow_list_desc = allow_list_desc
        if allow_list_id is not None:
            self.allow_list_id = allow_list_id
        if allow_list_ip_num is not None:
            self.allow_list_ip_num = allow_list_ip_num
        if allow_list_name is not None:
            self.allow_list_name = allow_list_name
        if associated_instance_num is not None:
            self.associated_instance_num = associated_instance_num

    @property
    def allow_list_desc(self):
        """Gets the allow_list_desc of this AllowListForDescribeAllowListsOutput.  # noqa: E501


        :return: The allow_list_desc of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :rtype: str
        """
        return self._allow_list_desc

    @allow_list_desc.setter
    def allow_list_desc(self, allow_list_desc):
        """Sets the allow_list_desc of this AllowListForDescribeAllowListsOutput.


        :param allow_list_desc: The allow_list_desc of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :type: str
        """

        self._allow_list_desc = allow_list_desc

    @property
    def allow_list_id(self):
        """Gets the allow_list_id of this AllowListForDescribeAllowListsOutput.  # noqa: E501


        :return: The allow_list_id of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :rtype: str
        """
        return self._allow_list_id

    @allow_list_id.setter
    def allow_list_id(self, allow_list_id):
        """Sets the allow_list_id of this AllowListForDescribeAllowListsOutput.


        :param allow_list_id: The allow_list_id of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :type: str
        """

        self._allow_list_id = allow_list_id

    @property
    def allow_list_ip_num(self):
        """Gets the allow_list_ip_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501


        :return: The allow_list_ip_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :rtype: int
        """
        return self._allow_list_ip_num

    @allow_list_ip_num.setter
    def allow_list_ip_num(self, allow_list_ip_num):
        """Sets the allow_list_ip_num of this AllowListForDescribeAllowListsOutput.


        :param allow_list_ip_num: The allow_list_ip_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :type: int
        """

        self._allow_list_ip_num = allow_list_ip_num

    @property
    def allow_list_name(self):
        """Gets the allow_list_name of this AllowListForDescribeAllowListsOutput.  # noqa: E501


        :return: The allow_list_name of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :rtype: str
        """
        return self._allow_list_name

    @allow_list_name.setter
    def allow_list_name(self, allow_list_name):
        """Sets the allow_list_name of this AllowListForDescribeAllowListsOutput.


        :param allow_list_name: The allow_list_name of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :type: str
        """

        self._allow_list_name = allow_list_name

    @property
    def associated_instance_num(self):
        """Gets the associated_instance_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501


        :return: The associated_instance_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :rtype: int
        """
        return self._associated_instance_num

    @associated_instance_num.setter
    def associated_instance_num(self, associated_instance_num):
        """Sets the associated_instance_num of this AllowListForDescribeAllowListsOutput.


        :param associated_instance_num: The associated_instance_num of this AllowListForDescribeAllowListsOutput.  # noqa: E501
        :type: int
        """

        self._associated_instance_num = associated_instance_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowListForDescribeAllowListsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllowListForDescribeAllowListsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AllowListForDescribeAllowListsOutput):
            return True

        return self.to_dict() != other.to_dict()
