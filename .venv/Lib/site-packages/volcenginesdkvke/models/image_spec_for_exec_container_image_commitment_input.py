# coding: utf-8

"""
    vke

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ImageSpecForExecContainerImageCommitmentInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
        'changes': 'list[str]',
        'image_name': 'str',
        'message': 'str'
    }

    attribute_map = {
        'author': 'Author',
        'changes': 'Changes',
        'image_name': 'ImageName',
        'message': 'Message'
    }

    def __init__(self, author=None, changes=None, image_name=None, message=None, _configuration=None):  # noqa: E501
        """ImageSpecForExecContainerImageCommitmentInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._author = None
        self._changes = None
        self._image_name = None
        self._message = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if changes is not None:
            self.changes = changes
        if image_name is not None:
            self.image_name = image_name
        if message is not None:
            self.message = message

    @property
    def author(self):
        """Gets the author of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501


        :return: The author of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ImageSpecForExecContainerImageCommitmentInput.


        :param author: The author of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def changes(self):
        """Gets the changes of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501


        :return: The changes of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this ImageSpecForExecContainerImageCommitmentInput.


        :param changes: The changes of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :type: list[str]
        """

        self._changes = changes

    @property
    def image_name(self):
        """Gets the image_name of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501


        :return: The image_name of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ImageSpecForExecContainerImageCommitmentInput.


        :param image_name: The image_name of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def message(self):
        """Gets the message of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501


        :return: The message of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ImageSpecForExecContainerImageCommitmentInput.


        :param message: The message of this ImageSpecForExecContainerImageCommitmentInput.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageSpecForExecContainerImageCommitmentInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSpecForExecContainerImageCommitmentInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageSpecForExecContainerImageCommitmentInput):
            return True

        return self.to_dict() != other.to_dict()
