# coding: utf-8

"""
    billing

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class UnsubscribeInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_token': 'str',
        'instance_id': 'str',
        'product': 'str',
        'unsubscribe_related_instance': 'bool'
    }

    attribute_map = {
        'client_token': 'ClientToken',
        'instance_id': 'InstanceID',
        'product': 'Product',
        'unsubscribe_related_instance': 'UnsubscribeRelatedInstance'
    }

    def __init__(self, client_token=None, instance_id=None, product=None, unsubscribe_related_instance=None, _configuration=None):  # noqa: E501
        """UnsubscribeInstanceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_token = None
        self._instance_id = None
        self._product = None
        self._unsubscribe_related_instance = None
        self.discriminator = None

        if client_token is not None:
            self.client_token = client_token
        self.instance_id = instance_id
        self.product = product
        if unsubscribe_related_instance is not None:
            self.unsubscribe_related_instance = unsubscribe_related_instance

    @property
    def client_token(self):
        """Gets the client_token of this UnsubscribeInstanceRequest.  # noqa: E501


        :return: The client_token of this UnsubscribeInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UnsubscribeInstanceRequest.


        :param client_token: The client_token of this UnsubscribeInstanceRequest.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                client_token is not None and len(client_token) > 36):
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `36`")  # noqa: E501

        self._client_token = client_token

    @property
    def instance_id(self):
        """Gets the instance_id of this UnsubscribeInstanceRequest.  # noqa: E501


        :return: The instance_id of this UnsubscribeInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this UnsubscribeInstanceRequest.


        :param instance_id: The instance_id of this UnsubscribeInstanceRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def product(self):
        """Gets the product of this UnsubscribeInstanceRequest.  # noqa: E501


        :return: The product of this UnsubscribeInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this UnsubscribeInstanceRequest.


        :param product: The product of this UnsubscribeInstanceRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def unsubscribe_related_instance(self):
        """Gets the unsubscribe_related_instance of this UnsubscribeInstanceRequest.  # noqa: E501


        :return: The unsubscribe_related_instance of this UnsubscribeInstanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribe_related_instance

    @unsubscribe_related_instance.setter
    def unsubscribe_related_instance(self, unsubscribe_related_instance):
        """Sets the unsubscribe_related_instance of this UnsubscribeInstanceRequest.


        :param unsubscribe_related_instance: The unsubscribe_related_instance of this UnsubscribeInstanceRequest.  # noqa: E501
        :type: bool
        """

        self._unsubscribe_related_instance = unsubscribe_related_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnsubscribeInstanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnsubscribeInstanceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnsubscribeInstanceRequest):
            return True

        return self.to_dict() != other.to_dict()
