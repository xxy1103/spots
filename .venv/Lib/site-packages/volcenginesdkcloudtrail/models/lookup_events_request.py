# coding: utf-8

"""
    cloud_trail

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class LookupEventsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'int',
        'lookup_conditions': 'list[LookupConditionForLookupEventsInput]',
        'max_results': 'int',
        'next_token': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'end_time': 'EndTime',
        'lookup_conditions': 'LookupConditions',
        'max_results': 'MaxResults',
        'next_token': 'NextToken',
        'start_time': 'StartTime'
    }

    def __init__(self, end_time=None, lookup_conditions=None, max_results=None, next_token=None, start_time=None, _configuration=None):  # noqa: E501
        """LookupEventsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_time = None
        self._lookup_conditions = None
        self._max_results = None
        self._next_token = None
        self._start_time = None
        self.discriminator = None

        if end_time is not None:
            self.end_time = end_time
        if lookup_conditions is not None:
            self.lookup_conditions = lookup_conditions
        if max_results is not None:
            self.max_results = max_results
        if next_token is not None:
            self.next_token = next_token
        if start_time is not None:
            self.start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this LookupEventsRequest.  # noqa: E501


        :return: The end_time of this LookupEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this LookupEventsRequest.


        :param end_time: The end_time of this LookupEventsRequest.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def lookup_conditions(self):
        """Gets the lookup_conditions of this LookupEventsRequest.  # noqa: E501


        :return: The lookup_conditions of this LookupEventsRequest.  # noqa: E501
        :rtype: list[LookupConditionForLookupEventsInput]
        """
        return self._lookup_conditions

    @lookup_conditions.setter
    def lookup_conditions(self, lookup_conditions):
        """Sets the lookup_conditions of this LookupEventsRequest.


        :param lookup_conditions: The lookup_conditions of this LookupEventsRequest.  # noqa: E501
        :type: list[LookupConditionForLookupEventsInput]
        """

        self._lookup_conditions = lookup_conditions

    @property
    def max_results(self):
        """Gets the max_results of this LookupEventsRequest.  # noqa: E501


        :return: The max_results of this LookupEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this LookupEventsRequest.


        :param max_results: The max_results of this LookupEventsRequest.  # noqa: E501
        :type: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this LookupEventsRequest.  # noqa: E501


        :return: The next_token of this LookupEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this LookupEventsRequest.


        :param next_token: The next_token of this LookupEventsRequest.  # noqa: E501
        :type: str
        """

        self._next_token = next_token

    @property
    def start_time(self):
        """Gets the start_time of this LookupEventsRequest.  # noqa: E501


        :return: The start_time of this LookupEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LookupEventsRequest.


        :param start_time: The start_time of this LookupEventsRequest.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LookupEventsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookupEventsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LookupEventsRequest):
            return True

        return self.to_dict() != other.to_dict()
